'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}


function isOpen (s) {
    let openBrackets = ['{', '(', '[']
    
    return openBrackets.includes(s)
}

// Complete the isBalanced function below.
function isBalanced(s) {
    let mapClose = {
        '}': '{',
        ')': '(',
        ']': '['
    }
    let arrS = s.split('')
    let openFound = []
    for (let c of arrS) {
        if (isOpen(c)) {
            openFound.push(c)
        } else {
            const hasOpen = openFound.length === 0
            const isDifferentThanLastClose = openFound[openFound.length -1] != mapClose[c]
         if (hasOpen || isDifferentThanLastClose) {
             console.log (hasOpen, isDifferentThanLastClose)
                return 'NO'
            }
            openFound.pop() 
        }
    }
   return openFound.length === 0 ? 'YES' : 'NO'
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const t = parseInt(readLine(), 10);

    for (let tItr = 0; tItr < t; tItr++) {
        const s = readLine();

        let result = isBalanced(s);

        ws.write(result + "\n");
    }

    ws.end();
}
