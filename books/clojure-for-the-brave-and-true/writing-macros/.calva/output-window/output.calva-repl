; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.9.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.27.4"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉writing-macros.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉writing-macros.core꞉> 
#'writing-macros.core/error-messages-for
clj꞉writing-macros.core꞉> 
("Please enter a name")
clj꞉writing-macros.core꞉> 
; Syntax error compiling at (src/writing_macros/core.clj:116:1).
; Unable to resolve symbol: validate in this context
clj꞉writing-macros.core꞉> 
#'writing-macros.core/order-details
clj꞉writing-macros.core꞉> 
#'writing-macros.core/order-details-validations
clj꞉writing-macros.core꞉> 
; Syntax error compiling at (src/writing_macros/core.clj:116:1).
; Unable to resolve symbol: validate in this context
clj꞉writing-macros.core꞉> 
#'writing-macros.core/validate
clj꞉writing-macros.core꞉> 
{:email ("Your email address does not look like an email address")}
clj꞉writing-macros.core꞉> 
:failure {:email (Your email address does not look like an email address)}
nil
clj꞉writing-macros.core꞉> 
#'writing-macros.core/if-valid
clj꞉writing-macros.core꞉> 
(let*
 [my-error-name (writing-macros.core/validate order-details order-details-validations)]
 (if (clojure.core/empty? my-error-name) (println :sucess) (println :failure my-error-name)))
clj꞉writing-macros.core꞉> 
